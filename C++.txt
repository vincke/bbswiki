1、常用快捷键
"Ctrl+J"是代码提示键；
点击函数名“+F12”（Ctrl+F12）是跳转到函数定义；
"Ctrl + -"  返回上一次光标处；
CTRL + SHIFT + -：向前定位
"Ctrl+ x" 删除该行；
"Ctrl+Shift+Space" 显示函数参数；
Ctrl + K + C - 注释；Ctrl + K + U - 取消注释；
Ctrl + ] - 寻找匹配的括号; 

CTRL + F4：关闭文档窗口
CTRL + F6 ：
CTRL + TAB：下一个文档窗口
CTRL + SHIFT + F6 ：
CTRL + SHIFT + TAB：上一个文档窗口

F5：运行调试
CTRL + F5：运行不调试
F10：跨过程序执行
F11：单步逐句执行
CTRL + J：列出成员 
CTRL + SHIFT + F9 ：取消所有断点
CTRL + F9：允许中断
CTRL + SHIFT + F5：调试-重新开始
行号：在工具-->选项-->文本编辑器-->c++

2、处理格式化输入和输出的 iostream 库
3、std::cin\cout\cerr\clog 标准的输入输出错误日志
4、用输出操作符 （<< 操作符）、输入操作符（>>操作符）:当操作符是输出操作符时，结果是左操作数的值。也就是说，输出操作返回的值是输出流本身。
5、(std::cout << "Enter two numbers:") << std::endl; endl 是一个特殊值，称为操纵符，将它写入输出流时，具有输出换行的效果，并刷新与设备相关联的 缓冲区。
6、通过在数值后面加 L 或者 l （字母“l”大写或小写） 指定常量为 long 类，通过在数值后面加 U 或 u 定义 unsigned 类型。 同时加 L 和 U 就能够得到 unsigned long 类型的字面值常量。
7、字符串连接符为 空格、换行或者制表符号。
8、直接初始化 比如字符串 std::string test("abcd");  int val(1023);
9、extern 关键字声明变量名而不定义它，extern 声明不是定义，也不分配存储空间。变量的定义用于为变量分配存储空间，还可以为变量指定初始值。在一个程序中，变量有且仅有一个定义。声明用于向程序表明变量的类型和名字。定义也是声明：当定义变量时我们声明了它的类型和名字。
10、定义常量 const int bufSize = 512;  
11、在全局作用域里定义非 const 变量时，它在整个程序中都可以访问；在全局作用域声明的 const 变量是定义该对象的文件的局部变量，此变量只存在于那个文件中，不能被其他文件访问；通过指定 const 变更为 extern，就可以在整个程序中访问 const 对象；非 const 变量默认为 extern。const定义的变量必须初始化。
12、引用(引用就是对象的另一个名字)：通过在变量名前添加“&”符号来定义，不可能将引用绑定到另一个对象，引用只是对象的另一名字。
13、const 引用是指向 const 对象的引用：const int &refVal = ival;   意义在于：区别与传对象，只能读取到ival的值，确不能修改ival的值。const引用可以初始化为不同类型的对象或者初始为右值，但是非const引用确不行。
14、typedef 可以用来定义类型的同义词。
15、定义枚举：enum open_modes {input = 3, output, append}; 后面的值依次增加；枚举成员值可以是不唯一的。 enum Points { point2d = 2, point2w,   point3d = 3, point3w }; 
16、类：当定义数据成员时，只能指定该数据成员的名字和类型。类不是在类定义里定义数据成员时初始化数据成员，而是通过称为构造函数的特殊成员函数控制初始化。
17、使用class关键字来定义类，那么定义在第一个访问标号前的任何成员都隐式指定为private。如果使用 struct 关键字，那么这些成员都是 public。使用 class 还是 struct 关键字来定义类，仅仅影响默认的初始访问级别。 
18、头文件用于声明而不是用于定义，因为头文件包含在多个源文件中，所以不应该含有变量或函数的定义。头文件可以定义类、值在编译时就已知道的 const 对象和 inline 函数。
19、预处理变量： #ifndef SALESITEM_H #define  SALESITEM_H #endif
20、如果头文件名括在尖括号<>里，那么认为该头文件是标准头文件。如果头文件在一对引号里，那么认为它是非系统头文件，非系统头文件的查找通常开始于源文件所在的路径。

第三章 标准库类型
1、std::cout  ：：是域操作符，表示cout在std的命令空间内。
2、采用using std::cout;  节省输入  cout<<s1<<std::endl;  但是头文件里必须使用完全限定的标准库名字。
3、string的初始化： string s1; string s2(s1); string s3("aaa"); string s4(n,'c');
